// Code generated by MockGen. DO NOT EDIT.
// Source: GuppyTech/modules/v1/utilities/device/repository (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "GuppyTech/modules/v1/utilities/device/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddDevice mocks base method.
func (m *MockRepository) AddDevice(arg0 models.DeviceInput, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDevice indicates an expected call of AddDevice.
func (mr *MockRepositoryMockRecorder) AddDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDevice", reflect.TypeOf((*MockRepository)(nil).AddDevice), arg0, arg1)
}

// BindSensorData mocks base method.
func (m *MockRepository) BindSensorData(arg0 string, arg1 models.ConnectionDat) (error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindSensorData", arg0, arg1)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindSensorData indicates an expected call of BindSensorData.
func (mr *MockRepositoryMockRecorder) BindSensorData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSensorData", reflect.TypeOf((*MockRepository)(nil).BindSensorData), arg0, arg1)
}

// Calibration mocks base method.
func (m *MockRepository) Calibration(arg0 models.PhCalibration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calibration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Calibration indicates an expected call of Calibration.
func (mr *MockRepositoryMockRecorder) Calibration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calibration", reflect.TypeOf((*MockRepository)(nil).Calibration), arg0)
}

// Control mocks base method.
func (m *MockRepository) Control(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Control", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Control indicates an expected call of Control.
func (mr *MockRepositoryMockRecorder) Control(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Control", reflect.TypeOf((*MockRepository)(nil).Control), arg0, arg1, arg2)
}

// DeleteDevice mocks base method.
func (m *MockRepository) DeleteDevice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockRepositoryMockRecorder) DeleteDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockRepository)(nil).DeleteDevice), arg0)
}

// GetAllDevices mocks base method.
func (m *MockRepository) GetAllDevices(arg0 string) ([]models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDevices", arg0)
	ret0, _ := ret[0].([]models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDevices indicates an expected call of GetAllDevices.
func (mr *MockRepositoryMockRecorder) GetAllDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDevices", reflect.TypeOf((*MockRepository)(nil).GetAllDevices), arg0)
}

// GetDeviceBrands mocks base method.
func (m *MockRepository) GetDeviceBrands() ([]models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceBrands")
	ret0, _ := ret[0].([]models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceBrands indicates an expected call of GetDeviceBrands.
func (mr *MockRepositoryMockRecorder) GetDeviceBrands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceBrands", reflect.TypeOf((*MockRepository)(nil).GetDeviceBrands))
}

// GetDeviceByAntares mocks base method.
func (m *MockRepository) GetDeviceByAntares(arg0 string) (models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByAntares", arg0)
	ret0, _ := ret[0].(models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByAntares indicates an expected call of GetDeviceByAntares.
func (mr *MockRepositoryMockRecorder) GetDeviceByAntares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByAntares", reflect.TypeOf((*MockRepository)(nil).GetDeviceByAntares), arg0)
}

// GetDeviceById mocks base method.
func (m *MockRepository) GetDeviceById(arg0, arg1 string) (models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceById", arg0, arg1)
	ret0, _ := ret[0].(models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceById indicates an expected call of GetDeviceById.
func (mr *MockRepositoryMockRecorder) GetDeviceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceById", reflect.TypeOf((*MockRepository)(nil).GetDeviceById), arg0, arg1)
}

// GetDeviceHistory mocks base method.
func (m *MockRepository) GetDeviceHistory(arg0 string) ([]models.DeviceHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceHistory", arg0)
	ret0, _ := ret[0].([]models.DeviceHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceHistory indicates an expected call of GetDeviceHistory.
func (mr *MockRepositoryMockRecorder) GetDeviceHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceHistory", reflect.TypeOf((*MockRepository)(nil).GetDeviceHistory), arg0)
}

// GetDeviceHistoryById mocks base method.
func (m *MockRepository) GetDeviceHistoryById(arg0, arg1 string) ([]models.DeviceHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceHistoryById", arg0, arg1)
	ret0, _ := ret[0].([]models.DeviceHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceHistoryById indicates an expected call of GetDeviceHistoryById.
func (mr *MockRepositoryMockRecorder) GetDeviceHistoryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceHistoryById", reflect.TypeOf((*MockRepository)(nil).GetDeviceHistoryById), arg0, arg1)
}

// PostCalibrationAntares mocks base method.
func (m *MockRepository) PostCalibrationAntares(arg0 string, arg1 models.PhCalibration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCalibrationAntares", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostCalibrationAntares indicates an expected call of PostCalibrationAntares.
func (mr *MockRepositoryMockRecorder) PostCalibrationAntares(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCalibrationAntares", reflect.TypeOf((*MockRepository)(nil).PostCalibrationAntares), arg0, arg1)
}

// PostControlAntares mocks base method.
func (m *MockRepository) PostControlAntares(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostControlAntares", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostControlAntares indicates an expected call of PostControlAntares.
func (mr *MockRepositoryMockRecorder) PostControlAntares(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostControlAntares", reflect.TypeOf((*MockRepository)(nil).PostControlAntares), arg0, arg1, arg2, arg3)
}

// UpdateDeviceById mocks base method.
func (m *MockRepository) UpdateDeviceById(arg0 models.DeviceInput, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceById indicates an expected call of UpdateDeviceById.
func (mr *MockRepositoryMockRecorder) UpdateDeviceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceById", reflect.TypeOf((*MockRepository)(nil).UpdateDeviceById), arg0, arg1)
}
